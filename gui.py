from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog, QMessageBox
from filter import process
from glob import glob
import os

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.report_path = ""
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(702, 610)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.featuresTree = QtWidgets.QTreeWidget(self.centralwidget)
        self.featuresTree.setGeometry(QtCore.QRect(0, 100, 351, 381))
        self.featuresTree.setObjectName("featuresTree")
        self.featuresTree.headerItem().setTextAlignment(0, QtCore.Qt.AlignCenter)
        item_0 = QtWidgets.QTreeWidgetItem(self.featuresTree)
        item_0.setCheckState(0, QtCore.Qt.Unchecked)
        item_0.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_0 = QtWidgets.QTreeWidgetItem(self.featuresTree)
        item_0.setCheckState(0, QtCore.Qt.Unchecked)
        item_0.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_0 = QtWidgets.QTreeWidgetItem(self.featuresTree)
        item_0.setCheckState(0, QtCore.Qt.Unchecked)
        item_0.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_0 = QtWidgets.QTreeWidgetItem(self.featuresTree)
        item_0.setCheckState(0, QtCore.Qt.Unchecked)
        item_0.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)

        self.fileButton = QtWidgets.QPushButton(self.centralwidget)
        self.fileButton.setGeometry(QtCore.QRect(120, 60, 121, 23))
        self.fileButton.setObjectName("fileButton")
        self.fileButton.clicked.connect(self.openFile)


        self.titleLabel = QtWidgets.QLabel(self.centralwidget)
        self.titleLabel.setGeometry(QtCore.QRect(280, 20, 141, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.titleLabel.setFont(font)
        self.titleLabel.setObjectName("titleLabel")

        self.buttonBox = QtWidgets.QDialogButtonBox(self.centralwidget)
        self.buttonBox.setGeometry(QtCore.QRect(260, 550, 166, 24))
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.buttonBox.accepted.connect(self.process_data)
        self.buttonBox.rejected.connect(self.exit)

        self.featuresTree_2 = QtWidgets.QTreeWidget(self.centralwidget)
        self.featuresTree_2.setGeometry(QtCore.QRect(350, 100, 351, 381))
        self.featuresTree_2.setObjectName("featuresTree_2")
        self.featuresTree_2.headerItem().setTextAlignment(0, QtCore.Qt.AlignCenter)
        item_0 = QtWidgets.QTreeWidgetItem(self.featuresTree_2)
        item_0.setCheckState(0, QtCore.Qt.Unchecked)
        item_0.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_3 = QtWidgets.QTreeWidgetItem(item_2)
        item_3.setCheckState(0, QtCore.Qt.Unchecked)
        item_3 = QtWidgets.QTreeWidgetItem(item_2)
        item_3.setCheckState(0, QtCore.Qt.Unchecked)
        item_3 = QtWidgets.QTreeWidgetItem(item_2)
        item_3.setCheckState(0, QtCore.Qt.Unchecked)
        item_3 = QtWidgets.QTreeWidgetItem(item_2)
        item_3.setCheckState(0, QtCore.Qt.Unchecked)
        item_0 = QtWidgets.QTreeWidgetItem(self.featuresTree_2)
        item_0.setCheckState(0, QtCore.Qt.Unchecked)
        item_0.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_0 = QtWidgets.QTreeWidgetItem(self.featuresTree_2)
        item_0.setCheckState(0, QtCore.Qt.Unchecked)
        item_0.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_2.setCheckState(0, QtCore.Qt.Unchecked)
        item_0 = QtWidgets.QTreeWidgetItem(self.featuresTree_2)
        item_0.setCheckState(0, QtCore.Qt.Unchecked)
        item_0.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Unchecked)

        self.memoryButton = QtWidgets.QRadioButton(self.centralwidget)
        self.memoryButton.setGeometry(QtCore.QRect(130, 500, 121, 21))
        self.memoryButton.setChecked(True)
        self.memoryButton.setObjectName("memoryButton")

        self.writeButton = QtWidgets.QRadioButton(self.centralwidget)
        self.writeButton.setGeometry(QtCore.QRect(250, 500, 99, 21))
        self.writeButton.setObjectName("writeButton")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 500, 121, 21))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 60, 121, 21))
        self.label_2.setObjectName("label_2")
        self.afBox = QtWidgets.QCheckBox(self.centralwidget)
        self.afBox.setGeometry(QtCore.QRect(280, 60, 141, 21))
        self.afBox.setObjectName("afBox")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fuckoo"))
        self.featuresTree.headerItem().setText(0, _translate("MainWindow", "Select Features"))
        __sortingEnabled = self.featuresTree.isSortingEnabled()
        self.featuresTree.setSortingEnabled(False)
        self.featuresTree.topLevelItem(0).setText(0, _translate("MainWindow", "procmemory"))
        self.featuresTree.topLevelItem(0).child(0).setText(0, _translate("MainWindow", "file"))
        self.featuresTree.topLevelItem(0).child(1).setText(0, _translate("MainWindow", "urls"))
        self.featuresTree.topLevelItem(0).child(2).setText(0, _translate("MainWindow", "proc_pid"))
        self.featuresTree.topLevelItem(0).child(3).setText(0, _translate("MainWindow", "procm_extracted"))
        self.featuresTree.topLevelItem(0).child(3).child(0).setText(0, _translate("MainWindow", "name"))
        self.featuresTree.topLevelItem(0).child(3).child(1).setText(0, _translate("MainWindow", "type"))
        self.featuresTree.topLevelItem(0).child(3).child(2).setText(0, _translate("MainWindow", "ext_urls"))
        self.featuresTree.topLevelItem(0).child(3).child(3).setText(0, _translate("MainWindow", "path"))
        self.featuresTree.topLevelItem(1).setText(0, _translate("MainWindow", "extracted"))
        self.featuresTree.topLevelItem(1).child(0).setText(0, _translate("MainWindow", "info"))
        self.featuresTree.topLevelItem(1).child(1).setText(0, _translate("MainWindow", "program"))
        self.featuresTree.topLevelItem(2).setText(0, _translate("MainWindow", "virustotal"))
        self.featuresTree.topLevelItem(2).child(0).setText(0, _translate("MainWindow", "vir_summary"))
        self.featuresTree.topLevelItem(2).child(0).child(0).setText(0, _translate("MainWindow", "positives"))
        self.featuresTree.topLevelItem(3).setText(0, _translate("MainWindow", "network"))
        self.featuresTree.topLevelItem(3).child(0).setText(0, _translate("MainWindow", "udp"))
        self.featuresTree.topLevelItem(3).child(1).setText(0, _translate("MainWindow", "dns_servers"))
        self.featuresTree.topLevelItem(3).child(2).setText(0, _translate("MainWindow", "tcp"))
        self.featuresTree.topLevelItem(3).child(3).setText(0, _translate("MainWindow", "mitm"))
        self.featuresTree.topLevelItem(3).child(4).setText(0, _translate("MainWindow", "hosts"))
        self.featuresTree.topLevelItem(3).child(5).setText(0, _translate("MainWindow", "domains"))
        self.featuresTree.topLevelItem(3).child(6).setText(0, _translate("MainWindow", "dead_hosts"))
        self.featuresTree.topLevelItem(3).child(7).setText(0, _translate("MainWindow", "dns"))
        self.featuresTree.topLevelItem(3).child(7).child(0).setText(0, _translate("MainWindow", "request"))
        self.featuresTree.setSortingEnabled(__sortingEnabled)
        self.fileButton.setText(_translate("MainWindow", "Select a directory"))
        self.titleLabel.setText(_translate("MainWindow", "Cuckoo Report Filter"))
        self.featuresTree_2.headerItem().setText(0, _translate("MainWindow", "Select Features"))
        __sortingEnabled = self.featuresTree_2.isSortingEnabled()
        self.featuresTree_2.setSortingEnabled(False)
        self.featuresTree_2.topLevelItem(0).setText(0, _translate("MainWindow", "signatures"))
        self.featuresTree_2.topLevelItem(0).child(0).setText(0, _translate("MainWindow", "families"))
        self.featuresTree_2.topLevelItem(0).child(1).setText(0, _translate("MainWindow", "description"))
        self.featuresTree_2.topLevelItem(0).child(2).setText(0, _translate("MainWindow", "sign_name"))
        self.featuresTree_2.topLevelItem(0).child(3).setText(0, _translate("MainWindow", "marks"))
        self.featuresTree_2.topLevelItem(0).child(3).child(0).setText(0, _translate("MainWindow", "call"))
        self.featuresTree_2.topLevelItem(0).child(3).child(0).child(0).setText(0, _translate("MainWindow", "category"))
        self.featuresTree_2.topLevelItem(0).child(3).child(0).child(1).setText(0, _translate("MainWindow", "sign_stacktrace"))
        self.featuresTree_2.topLevelItem(0).child(3).child(0).child(2).setText(0, _translate("MainWindow", "api"))
        self.featuresTree_2.topLevelItem(0).child(3).child(0).child(3).setText(0, _translate("MainWindow", "arguments"))
        self.featuresTree_2.topLevelItem(1).setText(0, _translate("MainWindow", "static"))
        self.featuresTree_2.topLevelItem(1).child(0).setText(0, _translate("MainWindow", "imported_dll_count"))
        self.featuresTree_2.topLevelItem(1).child(1).setText(0, _translate("MainWindow", "pe_imports"))
        self.featuresTree_2.topLevelItem(1).child(1).child(0).setText(0, _translate("MainWindow", "dll"))
        self.featuresTree_2.topLevelItem(1).child(2).setText(0, _translate("MainWindow", "pe_resources"))
        self.featuresTree_2.topLevelItem(1).child(2).child(0).setText(0, _translate("MainWindow", "pe_res_name"))
        self.featuresTree_2.topLevelItem(1).child(2).child(1).setText(0, _translate("MainWindow", "filetype"))
        self.featuresTree_2.topLevelItem(1).child(3).setText(0, _translate("MainWindow", "pe_sections"))
        self.featuresTree_2.topLevelItem(1).child(3).child(0).setText(0, _translate("MainWindow", "pe_sec_name"))
        self.featuresTree_2.topLevelItem(1).child(3).child(1).setText(0, _translate("MainWindow", "entropy"))
        self.featuresTree_2.topLevelItem(2).setText(0, _translate("MainWindow", "behavior"))
        self.featuresTree_2.topLevelItem(2).child(0).setText(0, _translate("MainWindow", "apistats"))
        self.featuresTree_2.topLevelItem(2).child(1).setText(0, _translate("MainWindow", "processes"))
        self.featuresTree_2.topLevelItem(2).child(1).child(0).setText(0, _translate("MainWindow", "process_path"))
        self.featuresTree_2.topLevelItem(2).child(1).child(1).setText(0, _translate("MainWindow", "pid"))
        self.featuresTree_2.topLevelItem(2).child(1).child(2).setText(0, _translate("MainWindow", "process_name"))
        self.featuresTree_2.topLevelItem(2).child(1).child(3).setText(0, _translate("MainWindow", "beh_command_line"))
        self.featuresTree_2.topLevelItem(2).child(1).child(4).setText(0, _translate("MainWindow", "ppid"))
        self.featuresTree_2.topLevelItem(2).child(2).setText(0, _translate("MainWindow", "processtree"))
        self.featuresTree_2.topLevelItem(2).child(2).child(0).setText(0, _translate("MainWindow", "tree_process_name"))
        self.featuresTree_2.topLevelItem(2).child(2).child(1).setText(0, _translate("MainWindow", "tree_command_line"))
        self.featuresTree_2.topLevelItem(2).child(2).child(2).setText(0, _translate("MainWindow", "children"))
        self.featuresTree_2.topLevelItem(2).child(3).setText(0, _translate("MainWindow", "summary"))
        self.featuresTree_2.topLevelItem(2).child(3).child(0).setText(0, _translate("MainWindow", "file_created"))
        self.featuresTree_2.topLevelItem(2).child(3).child(1).setText(0, _translate("MainWindow", "dll_loaded"))
        self.featuresTree_2.topLevelItem(2).child(3).child(2).setText(0, _translate("MainWindow", "regkey_opened"))
        self.featuresTree_2.topLevelItem(2).child(3).child(3).setText(0, _translate("MainWindow", "wmi_query"))
        self.featuresTree_2.topLevelItem(2).child(3).child(4).setText(0, _translate("MainWindow", "command_line"))
        self.featuresTree_2.topLevelItem(2).child(3).child(5).setText(0, _translate("MainWindow", "file_read"))
        self.featuresTree_2.topLevelItem(2).child(3).child(6).setText(0, _translate("MainWindow", "regkey_read"))
        self.featuresTree_2.topLevelItem(2).child(3).child(7).setText(0, _translate("MainWindow", "directory_enumerated"))
        self.featuresTree_2.topLevelItem(2).child(3).child(8).setText(0, _translate("MainWindow", "regkey_written"))
        self.featuresTree_2.topLevelItem(3).setText(0, _translate("MainWindow", "debug"))
        self.featuresTree_2.topLevelItem(3).child(0).setText(0, _translate("MainWindow", "action"))
        self.featuresTree_2.topLevelItem(3).child(1).setText(0, _translate("MainWindow", "errors"))
        self.featuresTree_2.topLevelItem(3).child(2).setText(0, _translate("MainWindow", "log"))
        self.featuresTree_2.setSortingEnabled(__sortingEnabled)
        self.memoryButton.setText(_translate("MainWindow", "Memory Based"))
        self.writeButton.setText(_translate("MainWindow", "I/O Based"))
        self.label.setText(_translate("MainWindow", "Extraction Method:"))
        self.label_2.setText(_translate("MainWindow", "Reports Directory:"))
        self.afBox.setText(_translate("MainWindow", "Family and Artifact"))
    
    def openFile(self):
        self.report_path =  QFileDialog.getExistingDirectory(None, 'Select a directory')
        print(self.report_path)
    
    def process_data(self):
        features = self.get_selected_features()
        if self.report_path:
            if features:
                if self.is_af_checked():
                    path = [y for x in os.walk(self.report_path) for y in glob(os.path.join(x[0], '*.json'))][0]
                    if 'Analisis' not in path or 'Experimento' not in path:
                        self.show_error('Directory structure not valid for Family and Artifact!')
                        return
                process(self.report_path, features, self.is_memory_checked(), self.is_af_checked())
            else:
                self.show_error('Select at least one feature!')
        else:
            self.show_error('Select a directory!')

    def get_selected_features(self):
        features = []
        for item in self.featuresTree.findItems("", QtCore.Qt.MatchContains | QtCore.Qt.MatchRecursive):
            if (item.checkState(0) == 1):
                features.append(item.text(0))
            elif (item.checkState(0) == 2):
                features.append(item.text(0))
        for item in self.featuresTree_2.findItems("", QtCore.Qt.MatchContains | QtCore.Qt.MatchRecursive):
            if (item.checkState(0) == 1):
                features.append(item.text(0))
            elif (item.checkState(0) == 2):
                features.append(item.text(0))
        return features
    
    def is_memory_checked(self):
        return self.memoryButton.isChecked()
    
    def is_af_checked(self):
        return self.afBox.isChecked()
    
    def show_error(self,text):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText("Error")
        msg.setInformativeText(text)
        msg.setWindowTitle("Error")
        msg.exec_()
    
    def exit(self):
        sys.exit()

if __name__ == "__main__":
    import struct
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    if (struct.calcsize("P")*8) == 32:
        ui.show_error("This application must be running as a 64-bit application!")
        sys.exit(app.exec_())
    MainWindow.show()
    sys.exit(app.exec_())
